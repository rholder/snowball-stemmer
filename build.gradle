import org.gradle.api.artifacts.maven.MavenDeployment

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.6
targetCompatibility = 1.6

group = 'com.github.rholder'
version = '1.3.0.581.2-SNAPSHOT'
ext.packaging = 'jar'

// not pushing to Maven Central
ext.sonatypeUsernameBogus = 'bogus'
ext.sonatypePasswordBogus = 'bogus'

repositories {
    mavenCentral()
}

configurations.compile {
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
    // junit testing
    testCompile "junit:junit:4.11"
}

/** Function always returns a new manifest that can be customized */
def defaultManifest() {
    return manifest{
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        attributes 'SCM-Revision': git_proc.text.trim()
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
        attributes 'Build-Host': InetAddress.localHost.hostName
    }
}

jar {
    manifest = defaultManifest()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
    manifest = defaultManifest()
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest = defaultManifest()
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}


//********* artifact signing *********
if(gradle.startParameter.taskNames.contains("uploadArchives")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

uploadArchives {
    repositories {
        if(version.contains("SNAPSHOT")) {
            mavenLocal()
        } else {
            mavenDeployer {
                // only necessary for staging/release
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                // for staging/release
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'snowball-stemmer'
                    description "This is the Java version of Snowball, a small string processing language designed for creating stemming algorithms for use in Information Retrieval."
                    url 'http://snowball.tartarus.org/'
                    licenses {
                        license {
                            name 'BSD License'
                            url 'http://www.opensource.org/licenses/bsd-license.html '
                            distribution 'repo'
                        }
                    }
                    scm {
                        url 'scm:https://github.com/rholder/snowball-stemmer.git'
                        connection 'scm:git@github.com:rholder/snowball-stemmer.git'
                        developerConnection 'scm:git@github.com:rholder/snowball-stemmer.git'
                    }
                    developers {
                        developer {
                            id 'rholder'
                            name 'Ray Holder'
                        }
                    }
                }
            }
        }
    }
}

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}
